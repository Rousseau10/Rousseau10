@model IEnumerable<R10.Models.WorkOut>
@{
    ViewBag.Title = "WorkOut";
}
@{

    ViewBag.ItemsPerPage = ViewBag.ItemsPerPage ?? 20;
    ViewBag.ItemsPerPageOptions = ViewBag.ItemsPerPageOptions ?? new List<int>{ 10, 20, 50, 100 };

    int currentPage = ViewBag.Start / ViewBag.ItemsPerPage + 1;
    int pageCount = (ViewBag.Count - 1) / ViewBag.ItemsPerPage + 1;
    ViewBag.Start = (currentPage - 1) * ViewBag.ItemsPerPage;

    RouteValueDictionary currentRouteValues = new RouteValueDictionary(new {
        start = ViewBag.Start,
        itemsPerPage = ViewBag.ItemsPerPage,
        orderBy = ViewBag.OrderBy,
        desc = ViewBag.Desc
    });
}
@helper AjaxGridNavigation(int currentPage, int pageCount, RouteValueDictionary currentRouteValues) {
    <div class="AjaxGridNavigation">
        @{
            int currentStart = (int)currentRouteValues["start"];
            int itemsPerPage = (int)currentRouteValues["itemsPerPage"];
        }
        @if (currentPage != 1) {
            currentRouteValues["start"] = 0;
            <a href="@Url.RouteUrl(currentRouteValues)" class="begin">|&lt;</a>
            currentRouteValues["start"] = currentStart - itemsPerPage;
            <a href="@Url.RouteUrl(currentRouteValues)" class="prev">&lt;&lt;</a>
        } else {
            <span class="begin">|&lt;</span> <span class="prev">&lt;&lt;</span>
        }
        <span>Page</span> <input type="text" value="@currentPage" class="pageNum hidden" />
        <span class="pageNum">@currentPage</span> <span>of</span> <span class="pageCount">@pageCount</span>
        @if (currentPage != pageCount) {
            currentRouteValues["start"] = currentStart + itemsPerPage;
            <a href="@Url.RouteUrl(currentRouteValues)" class="next">&gt;&gt;</a>
            currentRouteValues["start"] = (pageCount - 1) * itemsPerPage;
            <a href="@Url.RouteUrl(currentRouteValues)" class="end">&gt;|</a>
        } else {
            <span class="next">&gt;&gt;</span> <span class="end">&gt;|</span>
        }
        @{currentRouteValues["start"] = currentStart;}
        <a href="@Url.RouteUrl(currentRouteValues)" class="refresh">[Refresh Grid]</a>
        <span class="itemsPerPage hidden">Items Per Page:
            <select>
                @foreach (var option in ViewBag.ItemsPerPageOptions) {
                    <option value="@option" @if (option == ViewBag.ItemsPerPage) {
                            @: selected="selected"
                    }>@option</option>
                }
            </select>
        </span>
    </div>
}

<h2>WorkOut</h2>

<div id="AjaxGridContainer">
    <p>
        <a href="#insertEmptyRow" class="insertEmptyRow hidden">Create New</a>
    </p>
    @AjaxGridNavigation(currentPage, pageCount, currentRouteValues)
    <table id="AjaxGrid">
        <thead>
            <tr>
                <th data-column-name="workout_ID">
                    <span class="reorder">@Html.DisplayNameFor(model => model.workout_ID)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "workout_ID", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "workout_ID" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Date">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Date)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Date", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Date" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="DeadLift_final_set_Max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.DeadLift_final_set_Max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "DeadLift_final_set_Max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "DeadLift_final_set_Max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Deadlift_Max_Weight">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Deadlift_Max_Weight)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Deadlift_Max_Weight", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Deadlift_Max_Weight" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="ABS_Max_total_reps">
                    <span class="reorder">@Html.DisplayNameFor(model => model.ABS_Max_total_reps)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "ABS_Max_total_reps", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "ABS_Max_total_reps" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="ABS_Max_total_reps_wieght">
                    <span class="reorder">@Html.DisplayNameFor(model => model.ABS_Max_total_reps_wieght)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "ABS_Max_total_reps_wieght", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "ABS_Max_total_reps_wieght" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="ABS_Max_2Min">
                    <span class="reorder">@Html.DisplayNameFor(model => model.ABS_Max_2Min)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "ABS_Max_2Min", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "ABS_Max_2Min" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Bench_max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Bench_max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Bench_max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Bench_max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Bench_final_set_Max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Bench_final_set_Max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Bench_final_set_Max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Bench_final_set_Max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Bench_Max_wieght">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Bench_Max_wieght)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Bench_Max_wieght", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Bench_Max_wieght" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="PushUp_final_Set_max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.PushUp_final_Set_max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "PushUp_final_Set_max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "PushUp_final_Set_max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Push_ups_Max_2min">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Push_ups_Max_2min)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Push_ups_Max_2min", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Push_ups_Max_2min" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Biceps_curls_final_set_Max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Biceps_curls_final_set_Max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_curls_final_set_Max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_curls_final_set_Max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Biceps_curls_Wieght">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Biceps_curls_Wieght)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_curls_Wieght", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_curls_Wieght" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Biceps_Plate_final_set_Max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Biceps_Plate_final_set_Max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_Plate_final_set_Max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_Plate_final_set_Max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Biceps_plate_Weight">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Biceps_plate_Weight)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_plate_Weight", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Biceps_plate_Weight" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="TBack_final_set_max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.TBack_final_set_max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "TBack_final_set_max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "TBack_final_set_max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="TBack_Max_Weight">
                    <span class="reorder">@Html.DisplayNameFor(model => model.TBack_Max_Weight)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "TBack_Max_Weight", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "TBack_Max_Weight" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Delt_Mil_press_final_Set_Max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Delt_Mil_press_final_Set_Max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Delt_Mil_press_final_Set_Max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Delt_Mil_press_final_Set_Max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Delt_Mil_Press_Weight">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Delt_Mil_Press_Weight)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Delt_Mil_Press_Weight", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Delt_Mil_Press_Weight" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Deltiod_2Min">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Deltiod_2Min)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Deltiod_2Min", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Deltiod_2Min" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Obliques_final_rep_Max">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Obliques_final_rep_Max)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Obliques_final_rep_Max", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Obliques_final_rep_Max" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Obligues_Wieght">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Obligues_Wieght)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Obligues_Wieght", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Obligues_Wieght" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Run_3_sprint">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Run_3_sprint)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Run_3_sprint", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Run_3_sprint" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Run_2mile_timed">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Run_2mile_timed)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Run_2mile_timed", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Run_2mile_timed" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="DataISDumy">
                    <span class="reorder">@Html.DisplayNameFor(model => model.DataISDumy)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "DataISDumy", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "DataISDumy" })" class="downarrow">&darr;</a>
                </th>
                <th class="hidden"></th>
            </tr>
        </thead>
        <tbody>
@{Html.RenderAction("GridData", new { start = ViewBag.Start });}
        </tbody>
    </table>
    @AjaxGridNavigation(currentPage, pageCount, currentRouteValues)
</div>

<style>
    #AjaxGrid, #AjaxGrid input, #AjaxGrid button { clear: both; width: 100%; }
    #AjaxGrid thead { white-space: nowrap; }
    #AjaxGrid thead a, #AjaxGridContainer .AjaxGridNavigation a { text-decoration: none; }
    #AjaxGrid .error { background-color: #f66; color: #000; }
    #AjaxGridContainer .hidden { display: none; }
    #AjaxGridContainer .AjaxGridNavigation input.pageNum { width: 2em; }
    #AjaxGridContainer .AjaxGridNavigation .itemsPerPage { float: right; }
</style>

<script>
    (function($, undefined) {
        var totalRowCount = @ViewBag.Count,
            currentPage = 1,
            pageCount = @pageCount,
            savedParams = {
                start: 0,
                itemsPerPage: @ViewBag.ItemsPerPage
            },
            unloadWarningSet = false,
            containerContext, gridContext, navigationContext;

        $.ajaxSetup ({cache: false});

        function reloadGrid(params) {
            if (params.start === undefined || (params.start >= 0 && params.start < totalRowCount)) {
                if (!unloadWarningSet || confirm('You have unsaved changes. Are you sure you want to reload the grid?')) {
                    unloadWarningSet = false;
                    $(window).unbind('beforeunload');

                    $.extend(savedParams, params);
                    currentPage = Math.floor(savedParams.start / savedParams.itemsPerPage) + 1;
                    savedParams.start = (currentPage - 1) * savedParams.itemsPerPage;

                    return $.get('@Html.Raw(Url.Action("GridData"))', savedParams).done(function(rows, status, xhr) {
                        gridContext.find('tbody').html(rows);
                        totalRowCount = Math.floor(xhr.getResponseHeader('X-Total-Row-Count'));
                        pageCount = Math.ceil(totalRowCount / savedParams.itemsPerPage);

                        gridContext.find('td').filter(':last-child').removeClass('hidden');
                        navigationContext.find('input.pageNum').val(currentPage);
                        navigationContext.find('span.pageCount').html(pageCount);
                        navigationContext.find('.itemsPerPage select').val(savedParams.itemsPerPage);

                        if (currentPage === 1) {
                            navigationContext.find('a.prev, a.begin').each(disableLink);
                        } else {
                            navigationContext.find('span.prev, span.begin').each(enableLink);
                        }
                        if (currentPage === pageCount) {
                            navigationContext.find('a.next, a.end').each(disableLink);
                        } else {
                            navigationContext.find('span.next, span.end').each(enableLink);
                        }
                    });
                }
            }
            return $.Deferred().reject();
        }

        function reorderByColumn(clickedArrow) {
            var reloadParams = {
                start: 0,
                orderBy: $(clickedArrow).parent().data('column-name'),
                desc: $(clickedArrow).is('.uparrow')
            };
            reloadGrid(reloadParams).done(function() {
                gridContext.find('span.uparrow, span.downarrow').each(enableLink);
                disableLink.call(clickedArrow);
            });
        }

        function createRow(row) {
            var postParams = getPostParams(row);
            $.post('@Html.Raw(Url.Action("Create"))', postParams)
                .done(function(newRow) {
                    row.replaceWith(newRow);
                    totalRowCount++;
                    clearUnloadWarning();
                })
                .fail(function() {
                    row.addClass('error');
                });
        }

        function makeRowEditable(row) {
            $.get('@Html.Raw(Url.Action("Edit", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), function(editableRow) {
                row.replaceWith(editableRow);
            });
            setUnloadWarning();
        }

        function editRow(row) {
            var postParams = getPostParams(row);
            $.post('@Html.Raw(Url.Action("Edit", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), postParams)
                .done(function(newRow) {
                    row.replaceWith(newRow);
                    clearUnloadWarning();
                })
                .fail(function() {
                    row.addClass('error');
                });
        }

        function deleteRow(row) {
            if (confirm('Are you sure you want to delete this row?')) {
                $.post('@Html.Raw(Url.Action("Delete", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')))
                    .done(function() {
                        row.remove();
                        totalRowCount--;
                    })
                    .fail(function() {
                        alert('Row deletion failed.');
                    });
            }
        }

        function disableLink() {
            var elem = $(this),
                classes = elem.attr('class'),
                href = elem.attr('href'),
                html = elem.html();
            elem.replaceWith($('<span data-href="' + href + '" class="' + classes + '">' + html + '</span>'));
        }

        function enableLink() {
            var elem = $(this),
                classes = elem.attr('class'),
                href = elem.data('href'),
                html = elem.html();
            elem.replaceWith($('<a href="' + href + '" class="' + classes + '">' + html + '</a>'));
        }

        function getPostParams(row) {
            return row.find(':input[name]:not(:disabled)').filter(':not(:checkbox), :checked').map(function () {
                var input = $(this);
                return { name: input.attr('name'), value: input.val() };
            }).get();
        }

        function setUnloadWarning() {
            if (!unloadWarningSet) {
                unloadWarningSet = true;
                $(window).bind('beforeunload', function() {
                    return 'You have unsaved changes. Are you sure you want to leave?';
                });
            }
        }

        function clearUnloadWarning() {
            gridContext.find('td').filter(':last-child').removeClass('hidden');
            if (unloadWarningSet && $('.createRow, .editRow').length === 0) {
                unloadWarningSet = false;
                $(window).unbind('beforeunload');
            }
        }

        $(function () {
            containerContext = $('#AjaxGridContainer');
            gridContext = containerContext.find('#AjaxGrid');
            navigationContext = containerContext.find('.AjaxGridNavigation');

            containerContext.find('.insertEmptyRow').removeClass('hidden');
            navigationContext.find('input.pageNum').removeClass('hidden');
            navigationContext.find('.itemsPerPage').removeClass('hidden');
            navigationContext.find('span.pageNum').addClass('hidden');
            gridContext.find('th span.reorder').each(enableLink);
            gridContext.find('tr > *').filter(':last-child').removeClass('hidden');

            navigationContext.delegate('a.prev', 'click', function(e) {
                reloadGrid({start: savedParams.start - savedParams.itemsPerPage});
                e.preventDefault();
            });
            navigationContext.delegate('a.next', 'click', function(e) {
                reloadGrid({start: savedParams.start + savedParams.itemsPerPage});
                e.preventDefault();
            });
            navigationContext.delegate('a.begin', 'click', function(e) {
                reloadGrid({start: 0});
                e.preventDefault();
            });
            navigationContext.delegate('a.end', 'click', function(e) {
                reloadGrid({start: (pageCount - 1) * savedParams.itemsPerPage});
                e.preventDefault();
            });
            navigationContext.find('a.refresh').click(function(e) {
                reloadGrid({});
                e.preventDefault();
            });

            navigationContext.find('input.pageNum')
                .keyup(function(e) {
                    if (e.keyCode === 13) {
                        $(this).blur();
                    }
                })
                .blur(function() {
                    var newPageNum = Number($(this).val());
                    if (newPageNum >= 1 && newPageNum <= pageCount) {
                        reloadGrid({start: (newPageNum - 1) * savedParams.itemsPerPage});
                    } else {
                        $(this).val(currentPage);
                    }
                });

            navigationContext.find('.itemsPerPage select').change(function() {
                reloadGrid({itemsPerPage: Number($(this).val())});
            });

            gridContext.delegate('thead a.uparrow, thead a.downarrow', 'click', function(e) {
                reorderByColumn(this);
                e.preventDefault();
            });
            gridContext.find('thead a.reorder').click(function(e) {
                var th = $(this).parent(),
                    arrow = th.find('a.downarrow');
                if (arrow.length === 0) {
                    arrow = th.find('a.uparrow');
                }
                reorderByColumn(arrow[0]);
                e.preventDefault();
            });

            $('.insertEmptyRow').click(function(e) {
                $.get('@Html.Raw(Url.Action("Create"))', function(emptyRow) {
                    gridContext.find('tbody').prepend(emptyRow);
                });
                setUnloadWarning();
                e.preventDefault();
            });
            gridContext.delegate('.createRow', 'click', function() {
                createRow($(this).parents('tr'));
            });
            gridContext.delegate('.cancelCreateRow', 'click', function() {
                $(this).parents('tr').remove();
                clearUnloadWarning();
            });

            gridContext.delegate('.makeRowEditable', 'click', function(e) {
                makeRowEditable($(this).parents('tr'));
                e.preventDefault();
            });
            gridContext.delegate('.editRow', 'click', function() {
                editRow($(this).parents('tr'));
            });
            gridContext.delegate('.cancelEditRow', 'click', function() {
                var row = $(this).parents('tr');
                $.get('@Html.Raw(Url.Action("RowData", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), function(newRow) {
                    row.replaceWith(newRow);
                    clearUnloadWarning();
                }); 
            });

            gridContext.delegate('.deleteRow', 'click', function(e) {
                deleteRow($(this).parents('tr').eq(0));
                e.preventDefault();
            });
        });
    })(jQuery);
</script>
